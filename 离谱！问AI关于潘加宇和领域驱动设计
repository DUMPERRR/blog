有同学加我好友说，喜欢看潘老师文章，也喜欢“大道至简”这个词 。

我喜欢“大道至简”这个词，也是段永平老师提到的一个词。

是不是看错人了😂

领域驱动设计拆分系统和“大道至简”话术

只要抛开系统内部复杂性不谈，方法就变得简单易行了。

我提到“大道至简”的文章是这篇《领域驱动设计拆分系统和“大道至简”话术》 。但这里面我是在说警惕伪创新的卖家和买家用“大道至简”来做遮羞布 。

类似误解的情况很多，我在去年写文章说过 ：


*****2024年2月**** 

十多年前，我去北京某家单位讲课 。

第一天结束后，主人家，也就是主张这个培训的领导——IT部门的A总，在附近请我吃饭 。

互吹环节，列席的另外一位领导B总说，“我今天听了***节课，感觉对我们帮助很大啊，以后还要劳潘老师……”，接下来的话让我哭笑不得瞬间泪滞——“继续帮助我们推进敏捷开发” 。


**** 

上一篇关于《实现领域驱动设计》中译本的文章已经是2022年了 。

本来不想针对这个写太多，其实我的观点是这些书连英文原版都不推荐看，更不用说歪曲得不行的中译本了，除非是负负得正，歪打正着 。

但架不住偶尔有同学把我当“领域驱动设计专家”，发个中译本的图片过来找我答疑“我正在学习领域驱动设计，有个问题……” 。

摘自 《实现领域驱动设计》中译本和原文的评点纠错合集 。

当然，对于这些伪创新，我应该比伪创新的卖家和买家还要“专家”，就像一名科学家对民科的某个“创新”理论比民科本人看得更透彻，但不代表这名科学家是“民科理论专家” 。

这次又碰到类似情况，我就想到一个问题：如果问AI，潘加宇对领域驱动设计是什么观点，会得到什么样的回答呢？ 

我把这个问题提交给现在流行的几个大模型，看得到什么回答 。

DeepSeek R1 

DeepSeek在推理过程中就很离谱 ：

DeepSeek

潘加宇 对 领域驱动设计 是什么观点

就很离谱！不管从“网红”还是和DDD的联系 

关于潘加宇（实际应为潘爱民），他是中国资深的软件工程专家，翻译过《领域驱动设计》中文版。他的观点应该集中在实践落地层面：比如DDD在中国企业的适用性，如何避免过度设计等。不过公开资料中他专门论述DDD的内容较少，更多是作为译者传递Eric Evans的思想 。

从“网红”的角度来说，我在网上的信息可比潘爱民老师多多了，虽然比起真正的网红来说还差很远 。

好吧，也许AI是看学历，潘爱民老师是博士，比我高一级，但潘爱民老师没有发表过任何DDD相关的言论，DeepSeek把潘爱民老师称为“资深的软件工程专家”，可能是没查到潘爱民老师早年说过的话：“我一直排斥软件工程”！ 

后来DeepSeek纠正过来了，说《软件方法》、UML什么的，但还是胡编乱造 。

关于潘加宇（国内知名软件工程专家、UML专家和作者）对领域驱动设计（Domain-Driven Design, DDD）的观点，虽然没有单一公开文章或演讲专门论述，但结合他的著作（如《软件方法》系列）、公开演讲及行业访谈，可以总结出以下几个核心立场和重点强调的方向 ：

DDD的核心价值是解决复杂业务与技术的鸿沟 


观点：DDD的核心价值在于提供一套方法论，帮助团队（尤其是架构师和开发者）深入理解业务领域，建立业务语言与技术模型的统一认知。他强调DDD不是单纯的技术框架，而是思维方式和工作流程的转变 。


典型引用：“软件开发的本质是知识挖掘。DDD的核心是让开发人员成为领域专家，而不仅仅是代码工人。” 

批判盲目套用DDD技术组件，强调“轻量级实践” 


观点：他多次批评国内部分团队过度聚焦DDD的技术实现（如实体、值对象、聚合根、CQRS等），却忽视领域建模的本质。认为： 

应先专注于领域模型和统一语言的构建，而非直接写代码 。

技术复杂度（如微服务拆分）应跟随业务边界（限界上下文），而非为了技术而技术 。


警示：“不要为了DDD而DDD。如果业务简单，CRUD足矣；只有面对复杂业务逻辑和持续演进时，DDD才具价值。” 

“典型引用”、“警示”这个地方，好像在暗示我说过这个话，但这根本就不是我说话的风格。“不要为了DDD而DDD”，这不就是伪创新的说话风格吗，好像有道理，其实是废话 。

如果总分是100分，DeepSeek的回答只能得10分了 。

GPT-o3 

GPT就好多了 ：

ChatGPT o3

潘加宇 对 领域驱动设计 是什么观点

潘加宇对领域驱动设计（DDD）的主要观点概述 

维度

观点要点

总体态度

肯定“以业务模型为中心”这一核心思想，又对当前 DDD 在国内被“神化”“口号化”深表警惕。他指出，DDD 逐渐成了某些开发者“炫耀的口号”，很多人并未接受过系统的软件工程训练，就高举 DDD 大旗胡作非为，重演当年敏捷方法在中国过度包装的一幕 。

方法论定位

“领域建模”与“领域驱动设计”应该区分：前者旨在提炼核心知识、构建能反映业务本质的模型；后者是在此基础上兼顾核心知识并落实到软件设计。潘加宇用公式“利润 = 需求 - 设计”说明：只有先抓住核心（高价值知识），后续设计与实现才能真正为企业带来利润 。

对流行做法的批评

* 反对“伪创新”：大量文章或培训把已有的面向对象概念（聚合、限界上下文、不变式等）换个新名字就自称 DDD 创新 。
* 反对“仪式感”开发：一些团队把写“不变式”划分层次当 KPI，投入少、产量大、却无业务价值，被他讽为“厕所里的神兵利器” 。
* 反对浅尝辄止的样例：教学示例上的类往往寥寥数个，难以指导真正复杂领域建模 。

对文献与翻译的评点

他长期撰写《 DDD 领域驱动设计批评文集 》，逐句校勘《实现领域驱动设计》等译本中的概念混淆（如把 graph of objects 误译成“对象树”）、术语误用（Invariant 译成“不变量”）。其用意是防止初学者被错误译文带偏 。

实践建议

1.  先学好传统软件工程与 UML/OCL 基础，再谈 DDD ；
2.  聚焦核心+业务语言而非先上框架 ；
3.  掌握大规模领域模型的层与上下文划分，而不仅仅是目录结构 。


匯出到試算表
GPT列出了它能够搜到的一些资料，说我长期撰写《 DDD领域驱动设计批评文集 》等等 ，总分100分可以得60分了 。

Gemini 2.5 Pro 

Gemini 2.5 Pro

潘加宇 对 领域驱动设计 是什么观点

警惕术语滥用，回归软件工程本源 

潘加宇对当前DDD热潮中术语的滥用和“炒作”现象提出了尖锐的批评。他认为，许多开发者在没有经过系统性软件工程训练的情况下，将DDD的术语挂在嘴边，将其视为解决一切问题的“银弹”，这与曾经的“敏捷”热潮如出一辙，容易导致实践的偏差和失败 。

在他看来，DDD中的许多概念并非全新的发明，而是在软件工程发展长河中早已存在的思想的“重新包装”或“因为无知而重新发明”。因此，他主张对这些术语进行“溯源”，理解其产生的历史背景和真正要解决的问题 。

追本溯源，辨析DDD核心用语的价值 

潘加宇曾在多个场合，如ArchSummit全球架构师峰会上的演讲《领域驱动设计用语溯源》中，系统地剖析了DDD的核心术语。他致力于辨析 ：

哪些是带来进步的：真正为软件开发带来价值、促进沟通和设计的概念 。

哪些是“重新包装”的：将已有概念换上新名词，需要我们剥去外衣，看清其本质 。

哪些是“因为无知而重新发明”的：由于缺乏对软件工程历史的了解，而将早已存在的轮子“重新发明”一遍 。

哪些是无用的：可能在特定语境下有意义，但被泛化滥用后变得空洞无物的术语 。

强调建模的基础性地位 

潘加宇的观点与他在UML和软件方法领域的长期积累一脉相承。他强调“建模”在软件开发中的基础性地位。从他的理念来看，DDD本质是面向对象分析和设计思想的延伸和深化，其核心价值在于通过“统一语言（Ubiquitous Language）”和“领域模型（Domain Model）”来缩小业务人员和技术人员之间的沟通鸿沟，从而更精确地反映业务需求 。

他认为，在讨论DDD之前，开发者应具备扎实的UML和建模基础，理解需求分析、系统分析和设计的核心原则 。

将DDD置于更大的软件开发知识体系中 

潘加宇倾向于将DDD置于一个宏大的软件开发知识体系中进行考察，而不是将其孤立地视为一种独立的、全新的方法论。他常常将其与《统一软件开发过程》（RUP）、Larmman的《UML和模式应用》等经典理论进行参照和对齐，以揭示其内在联系和演进脉络 。

综上所述，潘加宇并非DDD的反对者，而是一位冷静的“清道夫”和“溯源者”。他倡导的是一种去伪存真、求真务实的学习和实践态度。他提醒从业者，与其追逐时髦的术语，不如回归软件工程的本质，扎实掌握建模和设计的基本功，批判性地吸收和运用包括DDD在内的各种方法，最终目的是为了更有效地解决复杂的业务问题，构建高质量的软件系统 。

看起来一套一套的，实际上就是针对我在2019年的一个演讲拼命薅羊毛，其他资料呢？ 

总分100分，Gemini 2.5 Pro得50分 。

Claude Sonnet 4（通过Poe访问） 

Claude-Sonnet-4

潘加宇 对 领域驱动设计 是什么观点

我的知识截止到2025年1月，对于潘加宇在领域驱动设计（DDD）方面的具体观点，我了解有限 。

潘加宇是一位在软件工程和系统分析领域有影响力的专家，他在UML建模、软件架构等方面有较多贡献。从我了解的信息来看，他对领域驱动设计持相对积极的态度，但也有一些批判性的思考 。

一般来说，潘加宇在软件设计方法论上比较重视 ：

实用性和可操作性 - 他倾向于关注方法论在实际项目中的可执行性，而不仅仅是理论层面的完美 。

建模的重要性 - 他强调通过合适的建模方法来理解和表达业务需求 。

对于DDD，他可能会认同其强调业务理解的核心思想，但对于某些过于复杂或教条化的实践可能会保留意见 。

不过我需要说明的是，关于潘加宇对DDD的具体观点和评价，我无法提供更详细准确的信息。如果您需要了解他的确切观点，建议查阅他的最新著作、博客文章或公开演讲内容 。

Claude估计除了编码之外，其他方面也不太灵 。它承认了解有限，说了一些话，又好像什么都没说，但至少它没有像DeepSeek这样异想天开，所以总分100分可以给30分 。

我现在的真实观点 

我在《小甜甜和牛夫人》中引用过2009年8月《程序员》上我写的专栏文章 ：


Technical News 程序员天下事 


潘加宇 

UMLChina 首席专家，潜心研究和实践 UML/UP 相关技术 。


Eric Evans 的努力 

6月19日在伦敦举行的DDD eXchange 2009会议上，各领域驱动设计的实践者纷纷分享了其领域驱动设计知识和经验。Eric Evans第一个登场，作了题为“Strategic Design and Responsibility Traps”的演讲。Strategic Design（战略设计）是Eric Evans在2004年出版的《Domain-Driven Design, Tackling Complexity in the Heart of Software》书中第四部分思想。此书出版后，Eric Evans就成了“领域驱动设计”的代名词，用Google搜索“Eric Evans”，出现在第一个的是他的网站domaindrivendesign.org。五年来，Eric Evans不停地在全球宣讲“领域驱动设计”的思想，开设课程，参加会议，组织Yahoo!讨论组，接受采访……在DDD eXchange 2009会议开始前几天，他甚至还去巴黎参加Paris JUG（巴黎Java用户组）组织的讲座 。九个月前的QCon伦敦2009会议上，Eric Evans也作了题为“What I’ve learned about DDD since the book”的演讲，总结了他五年来对领域驱动设计的新认识 。

Dan Haywood今年9月也要出一本《Domain-Driven Design Using Naked Objects》 。

最开始的面向对象设计社群就是以讨论领域建模为主，Peter Coad、Ed Yourdon、Rebecca Wirfs-Brock等人带来的第一批面向对象设计书籍，内容焦点都放在如何用对象思想去剖析一个领域的复杂性。后来随着GoF的《设计模式》出现，说起学习面向对象，似乎就变成了学习GoF模式。不少开发人员误以为会背诵设计模式，再喊几句“针对接口编程”、“分离变化”、“SRP”、“OCP”之类的口号，就掌握了面向对象设计技术了 。

Eric Evans的努力带来了许多追随者 。除了DDD Fans的帖子和博客之外，DDD书籍后来又有了Jimmy Nilsson的《Applying Domain-Driven Design and Patterns》和Tim McCarthy的《.NET Domain-Driven Design with C#》 。

Eric Evans 提起了拨乱反正的作用。他提醒人们，还是要聚焦于自己的核心，以它来实现软件能够市场上卖出去，因为这封装了别人的知识，这就是核心，核心在于别人无法取代 。

评价是“起到拨乱反正的作用” 。

DDD属于自己的内容，只是一些零散的心得，如果用原理、原则、模式来套的话，勉强算是模式 。这些内容既不新、也不深，有的甚至是错误和倒退的 。

也许DDD作为拨乱反正的旗子曾起到作用，但从2017年开始，被某些圈子胡乱吹嘘，各种伪创新泛滥之后，这面旗子已经发臭，可以丢掉了 。

这是我现在对领域驱动设计的评价，适用于国内和国外 。
